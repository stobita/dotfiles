[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent><C-n> :Defx -split=vertical -direction=topleft<CR>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'Time')
  nnoremap <silent><buffer><expr> D
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  let g:go_fmt_command = "goimports"
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
  let g:go_fmt_autosave = 0
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap [fugitive]  <Nop>
  nmap <space>f [fugitive]
  nnoremap <silent> [fugitive]s :Gstatus<CR>
  nnoremap <silent> [fugitive]c :Gcommit-v<CR>
  nnoremap <silent> [fugitive]d :Gvdiff<CR>
  nnoremap <silent> [fugitive]j :diffget //2<CR>
  nnoremap <silent> [fugitive]k :diffget //3<CR>
  nnoremap <silent> [fugitive]p :diffput<CR>
  nnoremap <silent> [fugitive]a :Gwq<CR>
  vmap <space>f [fugitive]
  vnoremap <silent> [fugitive]p :diffput<CR>
  command GStatusTabDiff tabedit %|Gdiff<CR>
  autocmd FileType fugitive noremap [fugitive]j :Gsplit<CR>:Gdiff<CR><C-w><C-l>
  autocmd FileType fugitive map <silent>fj D:wincmd l
'''

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
	let s:menus = {}
  let s:menus.file = {'description': 'File search (buffer, file, file/rec, file_mru'}
  let s:menus.line = {'description': 'Line search (change, grep, line, tag'}
  let s:menus.others = {'description': 'Others (command, command_history, help)'}
  let s:menus.file.command_candidates = [
        \ ['buffer', 'Denite buffer'],
        \ ['file: Files in the current directory', 'Denite file'],
        \ ['file/rec: Files, recursive list under the current directory', 'Denite file/rec'],
        \ ['file_mru: Most recently used files', 'Denite file_mru']
        \ ]
  let s:menus.line.command_candidates = [
        \ ['change', 'Denite change'],
        \ ['grep :grep', 'Denite grep'],
        \ ['line', 'Denite line'],
        \ ['tag', 'Denite tag']
        \ ]
  let s:menus.others.command_candidates = [
        \ ['command', 'Denite command'],
        \ ['command_history', 'Denite command_history'],
        \ ['help', 'Denite help']
        \ ]

  call denite#custom#var('menu', 'menus', s:menus)
  call denite#custom#source('file/rec', 'matchers', ['matcher_fuzzy', 'matcher_ignore_globs'])
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '*~', '*.o', '*.exe', '*.bak',
      \ '.DS_Store', '*.pyc', '*.sw[po]', '*.class',
      \ '.hg/', '.git/', '.bzr/', '.svn/',
      \ 'node_modules/', 'bower_components/', 'tmp/', 'log/', 'vendor',
      \ '.idea/', 'dist/',
      \ 'tags', 'tags-*'])
  call denite#custom#map('_', "<C-s>",
    \ '<denite:do_action:vsplit>')
  call denite#custom#map('insert', "<C-s>",
    \ '<denite:do_action:vsplit>')
  call denite#custom#map('_', "<C-v>",
    \ '<denite:do_action:split>')
  call denite#custom#map('insert', "<C-v>",
    \ '<denite:do_action:split>')
  call denite#custom#map('insert',
    \ "jj", '<denite:enter_mode:normal>')
  call denite#custom#map('normal', 'r',
      \ '<denite:do_action:quickfix>', 'noremap')
  call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
  call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>')
  call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>')

  nnoremap [denite] <Nop>
  nmap <space>d [denite]
  nmap <silent> <C-g> ;<C-u>Denite grep<CR>
  nmap <silent> <C-p> ;<C-u>Denite file/rec<CR>i
  nmap <silent> <space>g ;<C-u>DeniteCursorWord grep<CR>
  nmap <silent> <space>b ;<C-u>Denite buffer<CR>
  nmap <silent> [denite]r ;<C-u>Denite file_mru<CR>
  nmap <silent> [denite]y ;<C-u>Denite neoyank<CR>
  nmap <silent> [denite]d ;<C-u>Denite directory_rec<CR>
  nmap <silent> [denite]l ;<C-u>Denite directory_rec -default-action=cd<CR>
  nmap <silent> [denite]c ;Denite change<CR>
  nmap <silent> [denite]t ;Denite tag<CR>
  nmap <silent> [denite]m ;Denite menu<CR>
  nmap <silent> [denite]; ;Denite command<CR>
  nmap <silent> [denite]h ;Denite command_history<CR>i
  nmap <silent> [denite]j ;Denite -resume<CR>

  let s:denite_win_width_percent = 0.8
  let s:denite_win_height_percent = 0.6

  " Change denite default options
  call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'winwidth': &columns * s:denite_win_width_percent,
    \ 'wincol': (&columns - (&columns * s:denite_win_width_percent)) / 2,
    \ 'winheight': &lines * s:denite_win_height_percent,
    \ 'winrow': (&lines - (&lines * s:denite_win_height_percent)) / 2,
    \ })

  " new config
  " Define mappings
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> s
	  \ denite#do_map('do_action', 'vsplit')
	  nnoremap <silent><buffer><expr> v
	  \ denite#do_map('do_action', 'split')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	endfunction
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  imap <C-l> <Plug>(neosnippet_expand_or_jump)
  smap <C-l> <Plug>(neosnippet_expand_or_jump)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'othree/yajs.vim'

# [[plugins]]
# repo = 'prettier/vim-prettier'
# build = 'yarn install'
# on_ft = ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'php'] 
# hook_add = '''
#   let g:prettier#config#trailing_comma = 'none'
#   let g:prettier#config#bracket_spacing = 'true'
#   let g:prettier#autoformat = 0
#   autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.gql,*.md,*.vue,*.php PrettierAsync
# '''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_echo_msg_format = '[%linter%] %s'
  let g:ale_fixers = {
  \ 'php': ['php_cs_fixer'],
  \ 'blade': ['php_cs_fixer'],
  \ 'vue': ['prettier'],
  \ 'json': ['prettier'],
  \ 'typescript': ['prettier'],
  \ 'javascript.jsx': ['prettier'],
  \ 'javascript': ['prettier'],
  \ 'go': ['gofmt', 'goimports']
  \ }
  let g:ale_linters = {
  \ 'html': [],
  \ 'css': ['stylelint'],
  \ 'javascript': ['eslint'],
  \ 'typescript': ['tslint', 'tsserver'],
  \ 'go': ['golint', 'govet', 'gofmt', 'bingo'],
  \ }
  let g:ale_fix_on_save = 1
  let g:ale_javascript_prettier_use_local_config = 1
  let g:ale_sign_error = '×'
  let g:ale_sign_warning = '△'
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
'''

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
hook_add = '''
  nnoremap [lsp] <Nop>
  nmap <space>j [lsp]
  set hidden
  let g:LanguageClient_serverCommands = {
      \ 'vue': ['vls'],
      \ 'go': ['bingo'],
      \ 'javascript': ['javascript-typescript-stdio'],
      \ 'javascript.jsx': ['javascript-typescript-stdio'],
      \ 'typescript': ['javascript-typescript-stdio'],
      \ 'php': ['php', '~/dotfiles/composer/vendor/felixfbecker/language-server/bin/php-language-server.php']
      \ }
  let g:LanguageClient_loadSettings = 1
  let g:LanguageClient_hoverPreview = "Never"
  let g:LanguageClient_useVirtualText = 0
  let g:LanguageClient_changeThrottle = 5
  let g:LanguageClient_diagnosticsEnable = 0
  " let g:LanguageClient_loggingFile = expand('~/.vim/LanguageClient.log')

  nnoremap <space>m :call LanguageClient_contextMenu()<CR>
  nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  nnoremap <silent> [lsp]i :call LanguageClient#textDocument_implementation()<CR>
  nnoremap <silent> [lsp]f :call LanguageClient#textDocument_references()<CR>
  nnoremap <silent> [lsp]k :call LanguageClient#textDocument_typeDefinition()<CR>
  nnoremap <silent> [lsp]s :call LanguageClient#textDocument_documentSymbol()<CR>
'''

# [[plugins]]
# repo = 'prabirshrestha/async.vim'
# 
# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = '''
# if executable('gopls')
#     au User lsp_setup call lsp#register_server({
#         \ 'name': 'gopls',
#         \ 'cmd': {server_info->['gopls']},
#         \ 'whitelist': ['go'],
#         \ })
# endif
# 
# nmap <silent> gd ;LspDefinition<CR>
# nmap <silent> K ;LspHover<CR>
# '''
# on_ft = 'go'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = "Shougo/deol.nvim"
hook_add = '''
  nmap <silent> <Space>t ;Deol -split<CR>
	tnoremap <silent> jj  <C-\><C-n>
  let g:deol#prompt_pattern = '->'
'''

[[plugins]]
repo = "zchee/deoplete-zsh"

[[plugins]]
repo = 'jwalton512/vim-blade'
hook_add = '''
  autocmd BufNewFile,BufRead *.blade.php set ft=html | set ft=phtml | set ft=blade " Fix blade auto-indent
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
